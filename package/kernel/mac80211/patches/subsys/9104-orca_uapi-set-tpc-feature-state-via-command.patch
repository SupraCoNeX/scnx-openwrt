--- a/net/mac80211/orca_uapi.c
+++ b/net/mac80211/orca_uapi.c
@@ -407,6 +407,26 @@ orca_reset_sample_table(struct minstrel_
 	mi->user_sample_txpower = -1;
 }
 
+/**
+ * orca_is_phy_tpc_ready - check if TPC can be used for a PHY
+ *
+ * TPC is ready if hardware/driver supports it and it is enabled in
+ * the driver.
+ */
+static inline bool
+orca_is_phy_tpc_ready(struct ieee80211_hw *hw)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+
+	return (ieee80211_hw_check(hw, SUPPORTS_TPC_PER_PACKET) ||
+		ieee80211_hw_check(hw, SUPPORTS_TPC_PER_MRR)) &&
+		/*
+		 * this returns 1 for active, 0 for inactive and -1 for unsupported.
+		 * because hw_flag is set, assume it is always active in driver.
+		 */
+	       local->ops->get_feature_state(hw, IEEE80211_FTRCTRL_TPC);
+}
+
 static int
 orca_phy_set_feature(struct minstrel_priv *mp, char *args)
 {
@@ -434,6 +454,8 @@ orca_phy_set_feature(struct minstrel_pri
 
 	if (!strcmp(feature_str, "adaptive_sens"))
 		feature = IEEE80211_FTRCTRL_ADAPTIVE_SENSITIVITY;
+	else if (!strcmp(feature_str, "tpc"))
+		feature = IEEE80211_FTRCTRL_TPC;
 	else
 		return -ENOENT;
 
@@ -475,10 +497,14 @@ orca_sta_set_rc_mode(struct minstrel_ht_
 }
 
 static int
-orca_sta_set_tpc_mode(struct minstrel_ht_sta *mi, char *mode)
+orca_sta_set_tpc_mode(struct minstrel_priv *mp, struct minstrel_ht_sta *mi,
+		      char *mode)
 {
 	int i;
 
+	if (!orca_is_phy_tpc_ready(mp->hw))
+		return -EPERM;
+
 	if (!mode)
 		return -EINVAL;
 
@@ -671,7 +697,7 @@ orca_set_ratetbl(struct minstrel_priv *m
 	tpc = (cmd == STA_CMD_TPC || cmd == STA_CMD_TPRC);
 
 	if ((rc && !orca_sta_rc_manual_mode(mi)) ||
-	    (tpc && !orca_sta_tpc_manual_mode(mi)))
+	    (tpc && (!orca_is_phy_tpc_ready(mp->hw) || !orca_sta_tpc_manual_mode(mi))))
 		return -EPERM;
 
 	if (tpc)
@@ -758,7 +784,7 @@ orca_sta_cmd(struct minstrel_priv *mp, e
 		ret = orca_sta_set_rc_mode(mi, args[1]);
 		break;
 	case STA_CMD_TPC_MODE:
-		ret = orca_sta_set_tpc_mode(mi, args[1]);
+		ret = orca_sta_set_tpc_mode(mp, mi, args[1]);
 		break;
 	case STA_CMD_RESET_STATS:
 		orca_sta_reset_rc_stats(mp, mi);
@@ -791,7 +817,7 @@ orca_exec_cmd_for_all(struct minstrel_pr
 		break;
 	case STA_CMD_TPC_MODE:
 		list_for_each_entry_rcu(mi, &mp->stations, list)
-			orca_sta_set_tpc_mode(mi, args);
+			orca_sta_set_tpc_mode(mp, mi, args);
 		break;
 	default:
 		ret = -EPERM;
