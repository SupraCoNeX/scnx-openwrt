--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -2818,6 +2818,8 @@ ath9k_get_feature_state(struct ieee80211
 	switch (feature) {
 	case IEEE80211_FTRCTRL_ADAPTIVE_SENSITIVITY:
 		return (s16)(!(sc->sc_ah->common.disable_ani));
+	case IEEE80211_FTRCTRL_TPC:
+		return (s16)sc->sc_ah->tpc_enabled;
 	default:
 		return S16_MIN;
 	}
@@ -2837,6 +2839,17 @@ ath9k_set_feature_state(struct ieee80211
 	case IEEE80211_FTRCTRL_ADAPTIVE_SENSITIVITY:
 		ath9k_set_ani(sc, !!state);
 		break;
+	case IEEE80211_FTRCTRL_TPC:
+		bool enable = !!state;
+
+		if (enable != sc->sc_ah->tpc_enabled) {
+			sc->sc_ah->tpc_enabled = enable;
+
+			mutex_lock(&sc->mutex);
+			ath9k_set_txpower(sc, NULL);
+			mutex_unlock(&sc->mutex);
+		}
+		break;
 	default:
 		return -1;
 	}
--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -1036,6 +1036,7 @@ static void ath9k_set_hw_capab(struct at
 	hw->extra_tx_headroom = 4;
 
 	ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_ADAPTIVE_SENSITIVITY);
+	ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_TPC);
 
 	hw->wiphy->available_antennas_rx = BIT(ah->caps.max_rxchains) - 1;
 	hw->wiphy->available_antennas_tx = BIT(ah->caps.max_txchains) - 1;
