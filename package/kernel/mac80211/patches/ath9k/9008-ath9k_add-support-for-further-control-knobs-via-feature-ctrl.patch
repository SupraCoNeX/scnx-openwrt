--- a/drivers/net/wireless/ath/ath9k/init.c
+++ b/drivers/net/wireless/ath/ath9k/init.c
@@ -1037,6 +1037,7 @@ static void ath9k_set_hw_capab(struct at
 
 	ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_ADAPTIVE_SENSITIVITY);
 	ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_TPC);
+	ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_USER_POWER);
 
 	if (AR_SREV_9300_20_OR_LATER(sc->sc_ah)) {
 		ieee80211_feature_ctrl_set(hw, IEEE80211_FTRCTRL_ACK_TPC);
--- a/drivers/net/wireless/ath/ath9k/main.c
+++ b/drivers/net/wireless/ath/ath9k/main.c
@@ -2869,6 +2869,8 @@ ath9k_get_feature_state(struct ieee80211
 	case IEEE80211_FTRCTRL_CHIRP_TPC:
 	case IEEE80211_FTRCTRL_RPT_TPC:
 		return ath9k_get_frame_txpower(sc->sc_ah, feature);
+	case IEEE80211_FTRCTRL_USER_POWER:
+		return (s16)hw->conf.power_level;
 	default:
 		return S16_MIN;
 	}
@@ -2909,6 +2911,16 @@ ath9k_set_feature_state(struct ieee80211
 
 		ath9k_set_frame_txpower(sc->sc_ah, feature, state);
 		break;
+	case IEEE80211_FTRCTRL_USER_POWER:
+		if (state > 60) /* anything above doesn't really make sense */
+			return 1;
+
+		hw->conf.power_level = (int)state;
+
+		mutex_lock(&sc->mutex);
+		ath9k_set_txpower(sc, NULL);
+		mutex_unlock(&sc->mutex);
+		break;
 	default:
 		return -1;
 	}
